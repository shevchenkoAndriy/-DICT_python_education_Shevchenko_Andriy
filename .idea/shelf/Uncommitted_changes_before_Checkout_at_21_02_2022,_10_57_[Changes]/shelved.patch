Index: simplified-markdown-editor/output.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n# Simple Editor\n\n\n## About the project\n\nHi, this App will help you add Markdown markup through the console. \n\n## Usage example\n\n```if option == \"ordered-list\":```   \n1. plain  \n2. bold  \n3. italic  \n4. header  \n5. link  \n6. inline-code  \n7. ordered-list  \n8. unordered-list  \n9. new-line  \n  \n```if option == \"unordered-list\":```  \n* !help  \n* !done  \n  \n```if option == \"bold\":```  \n\n**bold**\n\n```if option == \"italic\":```  \n\n*italic*\n
===================================================================
diff --git a/simplified-markdown-editor/output.md b/simplified-markdown-editor/output.md
--- a/simplified-markdown-editor/output.md	
+++ b/simplified-markdown-editor/output.md	
@@ -29,4 +29,4 @@
 
 ```if option == "italic":```  
 
-*italic*
+*italic*
\ No newline at end of file
Index: simplified-markdown-editor/simplified-markdown-editor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class MarkdownEditor:\n\n    def __init__(self):\n        self.selected_format = None\n        self.content = \"\"\n    test_string = \"\"\"\n# Simple Editor\n\n\n## About the project\n\nHi, this App will help you add Markdown markup through the console. \n\n## Usage example\n\n```if option == \"ordered-list\":```   \n1. plain  \n2. bold  \n3. italic  \n4. header  \n5. link  \n6. inline-code  \n7. ordered-list  \n8. unordered-list  \n9. new-line  \n  \n```if option == \"unordered-list\":```  \n* !help  \n* !done  \n  \n```if option == \"bold\":```  \n\n**bold**\n\n```if option == \"italic\":```  \n\n*italic*\"\"\"\n\n    reserved_characters = (\"*\", \"**\", \"```\", \"#\")\n\n    available_formatters = (\"plain\", \"bold\", \"italic\", \"header\",\n                            \"link\", \"inline-code\", \"ordered-list\",\n                            \"unordered-list\", \"new-line\")\n\n    special_commands = \"!help\", \"!done\"\n\n    all_commands = (*available_formatters, *special_commands)\n\n    def show_help(self):\n        print(\"Available formatters:\", *self.available_formatters)\n        print(\"Special commands:\", *self.special_commands)\n\n    def correctly_input_command(self, string):\n        user_input = input(string)\n        while user_input not in self.all_commands:\n            if not user_input:\n                print(\"If you do not know what to do write command !help\")\n                user_input = input(string)\n                continue\n            print(\"Unknown formatting type or command\")\n            user_input = input(string)\n        return user_input\n\n    def menu_options(self):\n        option = self.correctly_input_command(\"Choose a formatter: > \")\n        if option == \"!help\":\n            self.show_help()\n            self.menu_options()\n\n        elif option == \"!done\":\n            self.add_markup(self.content)\n            return\n\n        elif option == \"plain\":\n            user_input = self.correct_input(\"Text: > \")\n            self.content += f\"{user_input} \"\n\n        elif option == \"bold\":\n            user_input = self.correct_input(\"Text: > \")\n            self.content += f\"**{user_input}** \"\n\n        elif option == \"italic\":\n            user_input = self.correct_input(\"Text: > \")\n            self.content += f\"*{user_input}* \"\n\n        elif option == \"header\":\n            level = self.correct_input_level(\"Level: > \")\n            user_input = self.correct_input(\"Text: > \")\n\n            if not self.selected_format:\n                self.content += f\"\\n\"\n                self.selected_format = option\n            else:\n                self.content += f\"\\n\\n\"\n\n            self.content += f\"{level * '#'} {user_input}\\n\\n\"\n\n        elif option == \"link\":\n            label = self.correct_input(\"Label: > \")\n            url = self.correct_input(\"URL: > \")\n            self.content += f\"[{label}]({url}) \"\n\n        elif option == \"inline-code\":\n            user_input = self.correct_input(\"Text: > \")\n            self.content += f\"```{user_input}``` \"\n\n        elif option == \"ordered-list\":\n            number_rows = self.input_number_rows(\"Number of rows: > \")\n            for row in range(1, number_rows + 1):\n                user_input = self.correct_input(f\"Row #{row}: > \")\n                self.content += f\"{row}. {user_input}  \\n\"\n\n        elif option == \"unordered-list\":\n            number_rows = self.input_number_rows(\"Number of rows: > \")\n            for row in range(1, number_rows + 1):\n                user_input = self.correct_input(f\"Row #{row}: > \")\n                self.content += f\"* {user_input}  \\n\"\n\n        elif option == \"new-line\":\n            self.content += \"  \\n\"\n\n        print(self.content)\n        self.menu_options()\n\n    def correct_input(self, string):\n        user_input = input(string)\n        while not set(self.reserved_characters).isdisjoint(user_input):\n            print(\"Sorry, these characters are not allowed here:\",\n                  *self.reserved_characters)\n            user_input = input(string)\n        return user_input\n\n    @staticmethod\n    def correct_input_level(string):\n        user_input = input(string)\n        while user_input:\n            try:\n                user_input = int(user_input)\n            except ValueError:\n                print(\"Please input number\")\n                user_input = input(string)\n                continue\n\n            else:\n                user_input = int(user_input)\n                if not 0 < user_input <= 6:\n                    print(\"The level should be within the range of 1 to 6.\")\n                    user_input = input(string)\n                    continue\n                break\n\n        return user_input\n\n    @staticmethod\n    def input_number_rows(string):\n        user_input = input(string)\n        while user_input:\n            try:\n                user_input = int(user_input)\n            except ValueError:\n                print(\"Please input number\")\n                user_input = input(string)\n                continue\n\n            else:\n                user_input = int(user_input)\n                if not 0 < user_input:\n                    print(\"Number rows cannot be negative\")\n                    user_input = input(string)\n                    continue\n                break\n\n        return user_input\n\n    @staticmethod\n    def add_markup(content):\n        file = open(\"output.md\", \"w\")\n        file.write(content)\n        file.close()\n        print(\"Save successfully\")\n\n\nmde = MarkdownEditor()\nmde.menu_options()\n# mde.add_markup(mde.test_string)\n
===================================================================
diff --git a/simplified-markdown-editor/simplified-markdown-editor.py b/simplified-markdown-editor/simplified-markdown-editor.py
--- a/simplified-markdown-editor/simplified-markdown-editor.py	
+++ b/simplified-markdown-editor/simplified-markdown-editor.py	
@@ -181,5 +181,5 @@
 
 
 mde = MarkdownEditor()
-mde.menu_options()
-# mde.add_markup(mde.test_string)
+# mde.menu_options()
+mde.add_markup(mde.test_string)
